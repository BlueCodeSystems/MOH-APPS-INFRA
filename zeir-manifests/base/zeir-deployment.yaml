--- 
apiVersion: v1
kind: Service 
metadata: 
  name: mysql-service
  labels:
    app: zeir-app
spec:
  ports:
  - port: 3306
  selector:
    app: zeir-app
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-cnf
  labels:
    app: zeir-app
data:
  my.cnf: |
    [mysqld]
    collation-server=utf8_unicode_ci
    init-connect='SET NAMES utf8'
    character-set-server=utf8
    bind-address=0.0.0.0
    innodb_buffer_pool_size=2G
    innodb_log_buffer_size=256M
    innodb_log_file_size=1G
    innodb_write_io_threads=16
    innodb_flush_log_at_trx_commit=0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zeir-config
  labels:
    app: zeir-app
data:
  mysql-username: zeir
  zeir-database: openmrs
  couchdb-username: zeir
  openmrs-database: openmrs
  openmrs-ui-username: openmrs
  opensrp-mysql-username: openmrs
  opensrp-mysql-database: opensrp
  opensrp-mysql-motech-database: motech
  opensrp-mysql-reporting-database: reporting
  opensrp-mysql-anm-database: anm
  opensrp-postgres-database: opensrp
  postgres-username: zeir
  dhis2-username: zeir
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
  labels:
    app: zeir-app
data:
  mysql-init.sh: |
    mysql -u root -p$MYSQL_ROOT_PASSWORD -e "CREATE DATABASE IF NOT EXISTS  $MYSQL_OPENMRS_DATABASE /*\!40100 DEFAULT CHARACTER SET utf8 */;"
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "CREATE DATABASE $OPENSRP_MYSQL_DATABASE /*\!40100 DEFAULT CHARACTER SET utf8 */;"
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "CREATE DATABASE $OPENSRP_MYSQL_MOTECH_DATABASE /*\!40100 DEFAULT CHARACTER SET utf8 */;"
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "CREATE DATABASE $OPENSRP_MYSQL_REPORTING_DATABASE /*\!40100 DEFAULT CHARACTER SET utf8 */;"
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "$MYSQL_HOST" -e "CREATE DATABASE $OPENSRP_MYSQL_ANM_DATABASE /*\!40100 DEFAULT CHARACTER SET utf8 */;"

    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "$MYSQL_HOST" -e "GRANT ALL ON \`$MYSQL_OPENMRS_DATABASE\`.* TO '$MYSQL_OPENMRS_USER'@'%' IDENTIFIED BY '$OPENSRP_MYSQL_USER_PASSWORD';"
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "$MYSQL_HOST" -e "GRANT ALL ON \`$OPENSRP_MYSQL_DATABASE\`.* TO '$OPENSRP_MYSQL_USER'@'%' IDENTIFIED BY '$OPENSRP_POSTGRES_USER_PASSWORD';"
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "$MYSQL_HOST" -e "GRANT ALL ON \`$OPENSRP_MYSQL_MOTECH_DATABASE\`.* TO '$OPENSRP_MYSQL_USER'@'%' ;"
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "$MYSQL_HOST" -e "GRANT ALL ON \`$OPENSRP_MYSQL_REPORTING_DATABASE\`.* TO '$OPENSRP_MYSQL_USER'@'%' ;"
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "$MYSQL_HOST" -e "GRANT ALL ON \`$OPENSRP_MYSQL_ANM_DATABASE\`.* TO '$OPENSRP_MYSQL_USER'@'%' ;"
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h "$MYSQL_HOST" -e "FLUSH PRIVILEGES;"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-app
  labels:
    app: zeir-app
spec:
  serviceName: mysql-service
  selector:
    matchLabels:
      app: zeir-app
  template:
    metadata:
      labels:
        app: zeir-app
    spec:
      containers:
      - image: mysql:5.6.48
        name: mysql-container
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: mysql-root-password
        - name: OPENSRP_MYSQL_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: mysql-user-password
        - name: OPENSRP_POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: postgres-username
        - name: OPENSRP_MYSQL_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: mysql-user-password
        - name: OPENSRP_MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-mysql-database
        - name: OPENSRP_MYSQL_MOTECH_DATABASE
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-mysql-motech-database
        - name: OPENSRP_MYSQL_REPORTING_DATABASE
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-mysql-reporting-database
        - name: OPENSRP_MYSQL_ANM_DATABASE
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-mysql-anm-database
        ports:
        - containerPort: 3306
          name: mysql-port
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysql-cnf-volume
          mountPath: /etc/mysql
          readOnly: true
        - name: mysql-init-volume
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
      - name: mysql-cnf-volume
        configMap:
          name: mysql-cnf
      - name: mysql-init-volume
        configMap:
          name: mysql-init-script
      - name: zeir-config
        configMap:
          name: zeir-config
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  labels:
    app: zeir-app
spec:
  ports:
  - port: 5432
  selector:
    app: zeir-app
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-app
  labels:
    app: zeir-app
spec:
  serviceName: postgres-service
  selector:
    matchLabels:
      app: zeir-app
  template:
    metadata:
      labels:
        app: zeir-app
    spec:
      containers:
      - image: postgres:10.13
        name: postgres-container
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: postgres-password
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: postgres-username
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-postgres-database
        ports:
        - containerPort: 5432
          name: postgres-port
        volumeMounts:
        - name: postgres-persistent-storage
          mountPath: /var/lib/postgresql/data/pgdata
      volumes:
      - name: postgres-persistent-storage
        persistentVolumeClaim:
          claimName: postgres-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb-service
  labels:
    app: zeir-app
spec:
  ports:
  - port: 5984
  selector:
    app: couchdb-app
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: couchdb-app
  labels:
    app: zeir-app
spec:
  serviceName: "couchdb-service"
  selector:
    matchLabels:
      app: couchdb-app
  template:
    metadata:
      labels:
        app: couchdb-app
    spec:
      containers:
      - image: couchdb:1.6.1
        name: couchdb-container
        env:
        - name: COUCHDB_USER
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: couchdb-username
        - name: COUCHDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: couchdb-password
        ports:
        - containerPort: 5954
          name: couch-port
        volumeMounts:
        - name: couchdb-storage
          mountPath: /var/local/var/lib/couchdb
      volumes:
      - name: couchdb-storage
        persistentVolumeClaim:
          claimName: couchdb-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb-lucene-service
  labels:
    app: zeir-app
spec:
  ports:
  - port: 5985
  selector:
    app: couchdb-lucene-app
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: couchdb-lucene-app
  labels:
    app: zeir-app
spec:
  serviceName: "couchdb-lucene-service"
  selector:
    matchLabels:
      app: couchdb-lucene-app
  template:
    metadata:
      labels:
        app: couchdb-lucene-app
    spec:
      containers:
      - image: klaemo/couchdb-lucene
        name: couchdb-lucene-container
        volumeMounts:
        - name: couchdb-lucene-storage
          mountPath: /opt/couchdb-lucene/indexes
        ports:
        - containerPort: 5985
      volumes:
      - name: couchdb-lucene-storage
        persistentVolumeClaim:
          claimName: couchdb-lucene-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: openmrs-service
  labels:
    app: zeir-app
spec:
  ports:
  - port: 8080
  selector:
    app: openmrs-app
  type:
    LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openmrs-app
  labels:
    app: zeir-app
spec:
  selector:
    matchLabels:
      app: openmrs-app
  template:
    metadata:
      labels:
        app: openmrs-app
    spec:
      containers:
      - image: openmrs/openmrs-distro-platform:1.11.9-SNAPSHOT
        name: openmrs-container
        imagePullPolicy: Always
        env:
        - name: DB_HOST
          value: $(mysql-service)
        - name: DB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: openmrs-database
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: mysql-username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: mysql-user-password
        - name: DB_CREATE_TABLES
          value: 'false'
        - name: DB_AUTO_UPDATE
          value: 'false'
        - name: MODULE_WEB_ADMIN
          value: 'true'
        ports:
        - containerPort: 8080
          name: openmrs-port
        volumeMounts:
        - name: openmrs-persistent-storage
          mountPath: /usr/local/tomcat/.OpenMRS
      volumes:
      - name: openmrs-persistent-storage
        persistentVolumeClaim:
          claimName: openmrs-pv-claim
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opensrp-build-script
  labels:
    app: zeir-app
data:
  opensrp-build.sh: |
    apt-get update
    apt-get install -y gettext
    apt-get install -y moreutils
    cd /etc/build-dir
    if [ ! -d "opensrp-server" ] ; then
       git clone https://github.com/BlueCodeSystems/opensrp-server
       cd opensrp-server
    else    
       cd "opensrp-server"
       git reset --hard HEAD
       git pull https://github.com/BlueCodeSystems/opensrp-server
    fi
    envsubst < assets/config/opensrp.properties | sponge assets/config/opensrp.properties
    envsubst < assets/config/activemq.properties | sponge assets/config/activemq.properties
    envsubst < assets/config/couchdb.properties | sponge assets/config/couchdb.properties
    envsubst < opensrp-web/src/main/resources/quartz.properties | sponge opensrp-web/src/main/resources/quartz.properties
    envsubst < opensrp-web/src/main/webapp/META-INF/context.xml | sponge opensrp-web/src/main/webapp/META-INF/context.xml

    mvn clean package -Dmaven.test.skip=true -P couchdb,jedis -f pom.xml
---
#This job builds the opensrp application using maven and places it in a volume that tomcat can access.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opensrp-app
  labels:
    app: zeir-app
spec:
  selector:
    matchLabels:
      app: opensrp-app
  template:
    metadata:
      labels:
        app: opensrp-app
    spec:
      containers:
      - image: tomcat:7.0.105-jdk8-openjdk
        name: opensrp-run-container
      initContainers:
      - image: maven:3.6.3-jdk-8
        name: opensrp-build-container
        imagePullPolicy: Always
        command: ["bash", "/etc/scripts/opensrp-build.sh"]
        env:
        - name: OPENMRS_URL
          value: $(openmrs-service):openmrs-port/openmrs
        - name: OPENMRS_USERNAME
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: openmrs-ui-username
        - name: OPENMRS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: openmrs-ui-password
        - name: COUCHDB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: couchdb-username
        - name: COUCHDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: couchdb-password
        - name: OPENSRP_MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-mysql-username
        - name: OPENSRP_MYSQL_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: mysql-user-password
        - name: OPENSRP_MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-mysql-database
        - name: OPENSRP_MYSQL_MOTECH_DATABASE
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-mysql-motech-database
        - name: OPENSRP_MYSQL_REPORTING_DATABASE
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-mysql-reporting-database
        - name: OPENSRP_MYSQL_ANM_DATABASE
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-mysql-anm-database
        - name: REDIS_HOST
          value: $(redis-service)
        - name: REDIS_PORT
          value: redis-port
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: redis-password
        - name: OPENSRP_MYSQL_JDBC
          value: jdbc:mysql:$(mysql-service):mysql-port/opensrp?createDatabaseIfNotExist=true
        - name: OPENSRP_MYSQL_JDBC_WO
          value: jdbc:mysql:$(mysql-service):mysql-port
        - name: OPENSRP_MYSQL_MOTECH_JDBC
          value: jdbc:mysql:$(mysql-service):mysql-port/motech
        - name: OPENSRP_POSTGRES_JDBC
          value: jdbc:postgresql:$(postgres-service):postgres-port/opensrp
        - name: DHIS2_URL
          value: $(dhis2-service):dhis2-port/api
        - name: DHIS2_USERNAME
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: dhis2-username
        - name: OPENSRP_POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: postgres-username
        - name: DHIS2_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: dhis2-password
        - name: OPENSRP_POSTGRES_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: zeir-secrets
              key: opensrp-postgres-password
        - name: OPENSRP_POSTGRES_DATABASE
          valueFrom:
            configMapKeyRef:
              name: zeir-config
              key: opensrp-postgres-database
        - name: ACTIVEMQ_URL
          value: tcp://$(activemq-service):activemq-port
        volumeMounts:
        - name: opensrp-build-storage
          mountPath: /etc/build-dir
        - name: opensrp-build-script-volume
          mountPath: /etc/scripts
          readOnly: true
        - name: maven-build-cache
          mountPath: /root/.m2
          readOnly: false
      volumes:
      - name: opensrp-build-storage
        persistentVolumeClaim:
          claimName: opensrp-build-pv-claim
      - name: maven-build-cache
        persistentVolumeClaim:
          claimName: maven-build-cache-claim
      - name: opensrp-build-script-volume
        configMap:
          name: opensrp-build-script
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  labels:
    app: zeir-app
spec:
  ports:
  - port: 6379
  selector:
    app: redis-app
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app: zeir-app
spec:
  serviceName: "redis-service"
  selector:
    matchLabels:
      app: redis-app
  template:
    metadata:
      labels:
        app: redis-app
    spec:
      containers:
      - image: redis:6.0.5
        name: redis-container
        ports:
        - containerPort: 6379
          name: redis-port
        volumeMounts:
        - name: redis-storage
          mountPath: /usr/local/etc/redis/redis
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: activemq-service
  labels:
    app: zeir-app
spec:
  ports:
  - port: 61616
  selector:
    app: activemq-app
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: activemq
  labels:
    app: zeir-app
spec:
  serviceName: "activemq-service"
  selector:
    matchLabels:
      app: activemq-app
  template:
    metadata:
      labels:
        app: activemq-app
    spec:
      containers:
      - image: rmohr/activemq:5.15.9-alpine
        name: activemq-container
        ports:
        - containerPort: 61616
          name: activemq-port
